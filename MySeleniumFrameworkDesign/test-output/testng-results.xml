<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="1" ignored="1" total="7" passed="4" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-07-02T14:54:10 IST" name="Suite" finished-at="2024-07-02T14:54:47 IST" duration-ms="37309">
    <groups>
      <group name="ErrorHandling">
        <method signature="ErrorsHandingTest.LoginErrorCheck()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" name="LoginErrorCheck" class="mypractice.tests.ErrorsHandingTest"/>
      </group> <!-- ErrorHandling -->
      <group name="purchase">
        <method signature="POMStandaloneTest.submitorder(java.util.HashMap)[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" name="submitorder" class="mypractice.tests.POMStandaloneTest"/>
      </group> <!-- purchase -->
    </groups>
    <test started-at="2024-07-02T14:54:10 IST" name="Catch Errors" finished-at="2024-07-02T14:54:37 IST" duration-ms="27033">
      <class name="mypractice.tests.ErrorsHandingTest">
        <test-method is-config="true" signature="navigateApp()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:10 IST" name="navigateApp" finished-at="2024-07-02T14:54:14 IST" duration-ms="4740" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateApp -->
        <test-method retried="true" signature="LoginErrorCheck()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:14 IST" name="LoginErrorCheck" finished-at="2024-07-02T14:54:15 IST" duration-ms="1002" status="SKIP">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Incorrect email or password.] but found [Incorrect email password.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Incorrect email or password.] but found [Incorrect email password.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at mypractice.tests.ErrorsHandingTest.LoginErrorCheck(ErrorsHandingTest.java:26)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginErrorCheck -->
        <test-method is-config="true" signature="closedriver()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:15 IST" name="closedriver" finished-at="2024-07-02T14:54:16 IST" duration-ms="871" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closedriver -->
        <test-method is-config="true" signature="navigateApp()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:16 IST" name="navigateApp" finished-at="2024-07-02T14:54:20 IST" duration-ms="3553" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateApp -->
        <test-method signature="LoginErrorCheck()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:20 IST" name="LoginErrorCheck" finished-at="2024-07-02T14:54:21 IST" duration-ms="826" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Incorrect email or password.] but found [Incorrect email password.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Incorrect email or password.] but found [Incorrect email password.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at mypractice.tests.ErrorsHandingTest.LoginErrorCheck(ErrorsHandingTest.java:26)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:463)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginErrorCheck -->
        <test-method is-config="true" signature="closedriver()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:21 IST" name="closedriver" finished-at="2024-07-02T14:54:22 IST" duration-ms="740" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closedriver -->
        <test-method is-config="true" signature="navigateApp()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:22 IST" name="navigateApp" finished-at="2024-07-02T14:54:26 IST" duration-ms="4030" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateApp -->
        <test-method signature="ProductErrorCheck()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:26 IST" name="ProductErrorCheck" finished-at="2024-07-02T14:54:34 IST" duration-ms="8097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ProductErrorCheck -->
        <test-method is-config="true" signature="closedriver()[pri:0, instance:mypractice.tests.ErrorsHandingTest@20b12f8a]" started-at="2024-07-02T14:54:34 IST" name="closedriver" finished-at="2024-07-02T14:54:37 IST" duration-ms="2820" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closedriver -->
      </class> <!-- mypractice.tests.ErrorsHandingTest -->
    </test> <!-- Catch Errors -->
    <test started-at="2024-07-02T14:54:10 IST" name="Submit Order" finished-at="2024-07-02T14:54:47 IST" duration-ms="37309">
      <class name="mypractice.tests.POMStandaloneTest">
        <test-method is-config="true" signature="navigateApp()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:10 IST" name="navigateApp" finished-at="2024-07-02T14:54:14 IST" duration-ms="4548" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateApp -->
        <test-method signature="submitorder(java.util.HashMap)[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:14 IST" name="submitorder" data-provider="getData" finished-at="2024-07-02T14:54:25 IST" duration-ms="10435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Kk@123456, email=KKK11@nomail.com, myproductName=ZARA COAT 3}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitorder -->
        <test-method is-config="true" signature="closedriver()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:25 IST" name="closedriver" finished-at="2024-07-02T14:54:28 IST" duration-ms="2725" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closedriver -->
        <test-method is-config="true" signature="navigateApp()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:28 IST" name="navigateApp" finished-at="2024-07-02T14:54:31 IST" duration-ms="3484" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateApp -->
        <test-method signature="submitorder(java.util.HashMap)[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:31 IST" name="submitorder" data-provider="getData" finished-at="2024-07-02T14:54:41 IST" duration-ms="9448" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Kk@123456, email=KK111@nomail.com, myproductName=ADIDAS ORIGINAL}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitorder -->
        <test-method is-config="true" signature="closedriver()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:41 IST" name="closedriver" finished-at="2024-07-02T14:54:41 IST" duration-ms="910" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closedriver -->
        <test-method is-config="true" signature="navigateApp()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:42 IST" name="navigateApp" finished-at="2024-07-02T14:54:45 IST" duration-ms="3723" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateApp -->
        <test-method signature="OrderHistoryTest()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:45 IST" name="OrderHistoryTest" finished-at="2024-07-02T14:54:46 IST" depends-on-methods="mypractice.tests.POMStandaloneTest.submitorder" duration-ms="888" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OrderHistoryTest -->
        <test-method is-config="true" signature="closedriver()[pri:0, instance:mypractice.tests.POMStandaloneTest@41dd05a]" started-at="2024-07-02T14:54:46 IST" name="closedriver" finished-at="2024-07-02T14:54:47 IST" duration-ms="777" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closedriver -->
      </class> <!-- mypractice.tests.POMStandaloneTest -->
    </test> <!-- Submit Order -->
  </suite> <!-- Suite -->
</testng-results>
